name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # ÏùòÏ°¥ÏÑ± Î≥¥Ïïà Ïä§Ï∫î
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          pnpm audit --audit-level high --json > npm-audit.json || true
          cat npm-audit.json

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            npm-audit.json
            snyk-report.json
          retention-days: 30

  # ÏΩîÎìú Î≥¥Ïïà Î∂ÑÏÑù
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-extended,security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # SAST (Static Application Security Testing)
  sast-scan:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Run ESLint Security Plugin
        run: |
          npx eslint --ext .ts,.js src/ --format json --output-file eslint-security.json || true
          cat eslint-security.json

      - name: Upload SAST results
        uses: actions/upload-artifact@v4
        with:
          name: sast-results
          path: |
            eslint-security.json
          retention-days: 30

  # ÎπÑÎ∞ÄÌÇ§ Í≤ÄÏÇ¨
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # ÎùºÏù¥ÏÑ†Ïä§ Ïª¥ÌîåÎùºÏù¥Ïñ∏Ïä§ Í≤ÄÏÇ¨
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          npx license-checker --json --out licenses.json
          npx license-checker --summary

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json
          retention-days: 30

  # ÎèÑÏª§ Ïù¥ÎØ∏ÏßÄ Î≥¥Ïïà Ïä§Ï∫î (Ìñ•ÌõÑ ÌôïÏû•Ïö©)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: false # ÌòÑÏû¨ ÎπÑÌôúÏÑ±Ìôî, ÌïÑÏöîÏãú trueÎ°ú Î≥ÄÍ≤Ω
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t llms-generator:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'llms-generator:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Î≥¥Ïïà Ï†êÏàò Í≥ÑÏÇ∞ Î∞è Î¶¨Ìè¨Ìä∏
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, sast-scan, secrets-scan, license-scan]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all security artifacts
        uses: actions/download-artifact@v4

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
          echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-report.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-report.md
          echo "- License Scan: ${{ needs.license-scan.result }}" >> security-report.md
          echo "" >> security-report.md
          
          # Î≥¥Ïïà Ï†êÏàò Í≥ÑÏÇ∞ (Í∞ÑÎã®Ìïú ÏòàÏãú)
          PASSED=0
          TOTAL=5
          
          [ "${{ needs.dependency-scan.result }}" = "success" ] && ((PASSED++))
          [ "${{ needs.codeql-analysis.result }}" = "success" ] && ((PASSED++))
          [ "${{ needs.sast-scan.result }}" = "success" ] && ((PASSED++))
          [ "${{ needs.secrets-scan.result }}" = "success" ] && ((PASSED++))
          [ "${{ needs.license-scan.result }}" = "success" ] && ((PASSED++))
          
          SCORE=$((PASSED * 100 / TOTAL))
          echo "## Security Score: $SCORE/100" >> security-report.md
          echo "" >> security-report.md
          
          if [ $SCORE -ge 80 ]; then
            echo "üü¢ **PASS** - Security standards met" >> security-report.md
          elif [ $SCORE -ge 60 ]; then
            echo "üü° **WARNING** - Some security issues found" >> security-report.md
          else
            echo "üî¥ **FAIL** - Critical security issues found" >> security-report.md
          fi
          
          cat security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 90

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Î≥¥Ïïà Ïã§Ìå®Ïãú Ïù¥Ïäà ÏÉùÏÑ±
  security-issue:
    name: Create Security Issue
    runs-on: ubuntu-latest
    needs: [security-report]
    if: failure() && github.event_name == 'schedule'
    steps:
      - name: Create security issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Security Scan Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            # Security Scan Failure
            
            The scheduled security scan has failed. Please review the following:
            
            ## Failed Scans
            - Dependency Scan: ${{ needs.dependency-scan.result }}
            - CodeQL Analysis: ${{ needs.codeql-analysis.result }}
            - SAST Scan: ${{ needs.sast-scan.result }}
            - Secrets Scan: ${{ needs.secrets-scan.result }}
            - License Scan: ${{ needs.license-scan.result }}
            
            ## Action Required
            1. Review the workflow logs for detailed error messages
            2. Address any security vulnerabilities found
            3. Update dependencies if necessary
            4. Re-run the security scan
            
            ## Links
            - [Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - [Security Policy](${context.payload.repository.html_url}/security/policy)
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automated']
            });