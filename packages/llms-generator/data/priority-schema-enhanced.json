{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Enhanced LLMs Generator Priority Schema",
  "description": "확장된 우선순위 메타데이터 스키마 - 태그, 카테고리, 의존성 지원",
  "type": "object",
  "required": ["document", "priority", "purpose", "keywords", "extraction", "tags", "dependencies"],
  "properties": {
    "document": {
      "type": "object",
      "required": ["id", "title", "source_path", "category"],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-z0-9]+(-[a-z0-9]+)*$",
          "description": "Kebab-case document identifier"
        },
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 200,
          "description": "Human-readable document title"
        },
        "source_path": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_/-]+\\.md$",
          "description": "Relative path from docs root"
        },
        "category": {
          "enum": ["guide", "api", "concept", "example", "reference", "llms"],
          "description": "Primary document category"
        },
        "subcategory": {
          "type": "string",
          "description": "Optional subcategory for finer classification"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification timestamp"
        },
        "wordCount": {
          "type": "integer",
          "minimum": 0,
          "description": "Approximate word count of source document"
        }
      }
    },
    "priority": {
      "type": "object",
      "required": ["score", "tier"],
      "properties": {
        "score": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "description": "Priority score (1-100)"
        },
        "tier": {
          "enum": ["critical", "essential", "important", "reference", "supplementary"],
          "description": "Priority tier classification"
        },
        "rationale": {
          "type": "string",
          "description": "Explanation for priority assignment"
        },
        "reviewDate": {
          "type": "string",
          "format": "date",
          "description": "Last priority review date"
        },
        "autoCalculated": {
          "type": "boolean",
          "description": "Whether priority was automatically calculated"
        }
      }
    },
    "purpose": {
      "type": "object",
      "required": ["primary_goal", "target_audience"],
      "properties": {
        "primary_goal": {
          "type": "string",
          "description": "Main purpose of the document"
        },
        "target_audience": {
          "type": "array",
          "items": {
            "enum": ["beginners", "intermediate", "advanced", "framework-users", "contributors", "llms"]
          },
          "minItems": 1,
          "description": "Intended audience"
        },
        "use_cases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Common use cases for this document"
        },
        "learning_objectives": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "What users should learn from this document"
        }
      }
    },
    "keywords": {
      "type": "object",
      "required": ["primary", "technical"],
      "properties": {
        "primary": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 5,
          "description": "Primary keywords (max 5)"
        },
        "technical": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Technical terms and concepts"
        },
        "patterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Framework patterns mentioned"
        },
        "avoid": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Terms to avoid in summaries"
        }
      }
    },
    "tags": {
      "type": "object",
      "required": ["primary"],
      "properties": {
        "primary": {
          "type": "array",
          "items": {
            "enum": ["beginner", "intermediate", "advanced", "core", "optional", "quick-start", "troubleshooting", "step-by-step", "practical", "tutorial", "reference", "technical", "developer", "theory", "architecture", "design", "code", "sample"]
          },
          "minItems": 1,
          "maxItems": 5,
          "description": "Primary classification tags"
        },
        "secondary": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Additional descriptive tags"
        },
        "audience": {
          "type": "array",
          "items": {
            "enum": ["framework-users", "beginners", "intermediate", "advanced", "contributors", "new-users", "experienced-users", "experts", "all-users"]
          },
          "description": "Target audience tags"
        },
        "complexity": {
          "enum": ["basic", "intermediate", "advanced", "expert"],
          "description": "Content complexity level"
        },
        "estimatedReadingTime": {
          "type": "string",
          "pattern": "^\\d+(-\\d+)?분$",
          "description": "Estimated reading time in Korean (e.g., '10분', '5-15분')"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date",
          "description": "When tags were last updated"
        }
      }
    },
    "dependencies": {
      "type": "object",
      "properties": {
        "prerequisites": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["documentId"],
            "properties": {
              "documentId": {
                "type": "string",
                "pattern": "^[a-z0-9]+(-[a-z0-9]+)*$"
              },
              "importance": {
                "enum": ["required", "recommended", "optional"],
                "default": "required"
              },
              "reason": {
                "type": "string",
                "description": "Why this prerequisite is needed"
              }
            }
          },
          "description": "Documents that should be read before this one"
        },
        "references": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["documentId"],
            "properties": {
              "documentId": {
                "type": "string",
                "pattern": "^[a-z0-9]+(-[a-z0-9]+)*$"
              },
              "type": {
                "enum": ["concept", "example", "api", "implementation"],
                "description": "Type of reference relationship"
              },
              "relevance": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Relevance score (0-1)"
              }
            }
          },
          "description": "Referenced documents"
        },
        "followups": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["documentId"],
            "properties": {
              "documentId": {
                "type": "string",
                "pattern": "^[a-z0-9]+(-[a-z0-9]+)*$"
              },
              "reason": {
                "type": "string",
                "description": "Why this followup is recommended"
              },
              "timing": {
                "enum": ["immediate", "after-practice", "advanced-stage"],
                "description": "When to read this followup"
              }
            }
          },
          "description": "Recommended followup reading"
        },
        "conflicts": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["documentId", "reason"],
            "properties": {
              "documentId": {
                "type": "string",
                "pattern": "^[a-z0-9]+(-[a-z0-9]+)*$"
              },
              "reason": {
                "type": "string",
                "description": "Why these documents conflict"
              },
              "severity": {
                "enum": ["minor", "moderate", "major"],
                "description": "Severity of the conflict"
              }
            }
          },
          "description": "Documents that conflict with this one"
        },
        "complements": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["documentId"],
            "properties": {
              "documentId": {
                "type": "string",
                "pattern": "^[a-z0-9]+(-[a-z0-9]+)*$"
              },
              "relationship": {
                "enum": ["alternative-approach", "deeper-dive", "practical-example", "related-concept"],
                "description": "Type of complementary relationship"
              },
              "strength": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Strength of complementary relationship"
              }
            }
          },
          "description": "Documents that complement this one"
        }
      }
    },
    "composition": {
      "type": "object",
      "properties": {
        "categoryAffinity": {
          "type": "object",
          "patternProperties": {
            "^(guide|api|concept|example|reference)$": {
              "type": "number",
              "minimum": 0,
              "maximum": 1
            }
          },
          "description": "Affinity scores with different categories"
        },
        "tagAffinity": {
          "type": "object",
          "patternProperties": {
            "^[a-z-]+$": {
              "type": "number",
              "minimum": 0,
              "maximum": 1
            }
          },
          "description": "Affinity scores with different tags"
        },
        "contextualRelevance": {
          "type": "object",
          "properties": {
            "onboarding": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Relevance for user onboarding"
            },
            "troubleshooting": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Relevance for problem solving"
            },
            "advanced_usage": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Relevance for advanced usage"
            },
            "api_reference": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Relevance as API reference"
            },
            "learning_path": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Relevance in learning progression"
            }
          },
          "description": "Contextual relevance scores"
        },
        "userJourneyStage": {
          "enum": ["discovery", "onboarding", "implementation", "mastery", "troubleshooting"],
          "description": "Stage in user journey where this document is most relevant"
        }
      }
    },
    "extraction": {
      "type": "object",
      "required": ["strategy", "character_limits"],
      "properties": {
        "strategy": {
          "enum": ["concept-first", "example-first", "api-first", "tutorial-first", "reference-first"],
          "description": "Extraction strategy"
        },
        "character_limits": {
          "type": "object",
          "patternProperties": {
            "^(minimum|origin|\\d+)$": {
              "type": "object",
              "properties": {
                "focus": {
                  "type": "string",
                  "description": "What to focus on for this character limit"
                },
                "structure": {
                  "type": "string",
                  "description": "How to structure the content"
                },
                "must_include": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Elements that must be included"
                },
                "avoid": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Elements to avoid"
                },
                "example_structure": {
                  "type": "string",
                  "description": "Example of expected structure"
                }
              }
            }
          },
          "description": "Guidelines for different character limits"
        },
        "emphasis": {
          "type": "object",
          "properties": {
            "must_include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Elements that must always be included"
            },
            "nice_to_have": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Elements that are nice to have"
            },
            "contextual_keywords": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Keywords that provide important context"
            }
          }
        }
      }
    },
    "quality": {
      "type": "object",
      "properties": {
        "completeness_threshold": {
          "type": "number",
          "minimum": 0.5,
          "maximum": 1.0,
          "description": "Minimum completeness threshold"
        },
        "code_examples_required": {
          "type": "boolean",
          "description": "Whether code examples are required"
        },
        "consistency_checks": {
          "type": "array",
          "items": {
            "enum": ["terminology", "code_style", "naming_conventions", "pattern_usage", "api_signatures", "tag_consistency", "dependency_validity"]
          },
          "description": "Quality checks to perform"
        },
        "lastQualityCheck": {
          "type": "string",
          "format": "date-time",
          "description": "When quality was last checked"
        },
        "qualityScore": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Overall quality score"
        }
      }
    },
    "metadata": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date",
          "description": "Creation date"
        },
        "updated": {
          "type": "string",
          "format": "date",
          "description": "Last update date"
        },
        "version": {
          "type": "string",
          "pattern": "^\\d+\\.\\d+(\\.\\d+)?$",
          "description": "Version number"
        },
        "original_size": {
          "type": "integer",
          "minimum": 0,
          "description": "Original file size in bytes"
        },
        "estimated_extraction_time": {
          "type": "object",
          "patternProperties": {
            "^(minimum|origin|\\d+)$": {
              "type": "string",
              "description": "Estimated time to extract content"
            }
          }
        },
        "maintainer": {
          "type": "string",
          "description": "Person responsible for maintaining this document"
        },
        "reviewCycle": {
          "type": "string",
          "enum": ["weekly", "monthly", "quarterly", "yearly", "as-needed"],
          "description": "How often this document should be reviewed"
        }
      }
    },
    "work_status": {
      "type": "object",
      "properties": {
        "source_modified": {
          "type": "string",
          "format": "date-time",
          "description": "When source document was last modified"
        },
        "generated_files": {
          "type": "object",
          "patternProperties": {
            "^\\d+$": {
              "type": "object",
              "required": ["edited", "needs_update"],
              "properties": {
                "path": {
                  "type": "string",
                  "description": "Path to generated file"
                },
                "created": {
                  "type": "string",
                  "format": "date-time",
                  "description": "When file was created"
                },
                "modified": {
                  "type": "string",
                  "format": "date-time",
                  "description": "When file was last modified"
                },
                "edited": {
                  "type": "boolean",
                  "description": "Whether file was manually edited"
                },
                "needs_update": {
                  "type": "boolean",
                  "description": "Whether file needs to be regenerated"
                },
                "qualityScore": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "description": "Quality score of generated content"
                },
                "characterCount": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "Actual character count of generated content"
                }
              }
            }
          },
          "description": "Status of generated files by character limit"
        },
        "last_checked": {
          "type": "string",
          "format": "date-time",
          "description": "When work status was last checked"
        },
        "automation_status": {
          "type": "object",
          "properties": {
            "auto_tag_extraction": {
              "type": "boolean",
              "description": "Whether tags are automatically extracted"
            },
            "auto_dependency_detection": {
              "type": "boolean",
              "description": "Whether dependencies are automatically detected"
            },
            "last_auto_update": {
              "type": "string",
              "format": "date-time",
              "description": "When automatic processing was last run"
            }
          }
        }
      }
    }
  }
}