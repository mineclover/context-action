/**
 * Help Display - Manages help text display
 */

export class HelpDisplay {
  show(): void {
    console.log('');
    console.log('üöÄ LLMS Generator - Core Commands (Optimized)');
    console.log('');
    console.log('PROJECT INITIALIZATION:');
    console.log('  init [options]                   Initialize complete project (discovery ‚Üí priority ‚Üí templates)');
    console.log('                                   [--dry-run] [--overwrite] [--quiet]');
    console.log('                                   [--skip-discovery] [--skip-priority] [--skip-templates]');
    console.log('');
    console.log('WORKFLOW MANAGEMENT:');
    console.log('  work-next [options]              Find next document to work on');
    console.log('                                   [-l, --language <lang>] [--show-completed] [-v, --verbose]');
    console.log('                                   [-n, --limit <number>] [--top <number>] [--sort-by <field>]');
    console.log('                                   [--category <cat>] [-c, --character-limit <num>]');
    console.log('');
    console.log('PRIORITY MANAGEMENT:');
    console.log('  priority-stats [options]         Show priority distribution statistics');
    console.log('                                   [--quiet]');
    console.log('  priority-health [options]        Check priority consistency and health');
    console.log('                                   [--quiet]');
    console.log('  priority-suggest [options]       Get priority improvement suggestions');
    console.log('                                   [--document-id <id>] [--quiet]');
    console.log('  priority-auto [options]          Auto-recalculate priorities');
    console.log('                                   [--criteria <file>] [--force] [--quiet]');
    console.log('  priority-tasks [options]         Manage priority.json files (missing, outdated, invalid)');
    console.log('                                   [-l, --language <lang>] [--category <cat>] [--task-type <type>]');
    console.log('                                   [-n, --limit <num>] [-v, --verbose] [--fix] [--dry-run]');
    console.log('');
    console.log('TEMPLATE MANAGEMENT (RECOMMENDED DEFAULT):');
    console.log('  generate-templates [options]     Generate template files for all documents (DEFAULT WORKFLOW)');
    console.log('                                   [-l, --language <lang>] [--category <cat>] [--character-limits <nums>]');
    console.log('                                   [--overwrite] [--dry-run] [-v, --verbose]');
    console.log('');
    console.log('  fill-templates [options]         Fill empty template files with content from source documents');
    console.log('                                   [-l, --language <lang>] [--category <cat>] [-c, --character-limit <num>]');
    console.log('                                   [--dry-run] [--overwrite] [-v, --verbose]');
    console.log('');
    console.log('LLMS GENERATION:');
    console.log('  clean-llms-generate [char-limit] [options]');
    console.log('                                   Generate clean LLMS files for LLM training (no metadata)');
    console.log('                                   [-l, --language <lang>] [-c, --category <cat>]');
    console.log('                                   [-p, --pattern clean|minimal|raw] [--dry-run] [-v, --verbose]');
    console.log('');
    console.log('  llms-generate [options]          Generate standard LLMS files with metadata');
    console.log('                                   [-c, --character-limit <num>] [--category <cat>]');
    console.log('                                   [-l, --language <lang>] [-p, --pattern standard|minimum|origin]');
    console.log('                                   [--dry-run] [-v, --verbose]');
    console.log('');
    console.log('DOCUMENTATION SYNC:');
    console.log('  sync-docs [options]              Sync documentation changes (used by pre-commit hooks)');
    console.log('                                   [--changed-files <files>] [--quiet] [--dry-run] [--force]');
    console.log('');
    console.log('EXAMPLES:');
    console.log('  # üöÄ RECOMMENDED WORKFLOW (Complete setup)');
    console.log('  llms init');
    console.log('  llms generate-templates  # Generate all template files');
    console.log('  llms llms-generate  # Generate final LLMS files');
    console.log('');
    console.log('  # Preview and control generation');
    console.log('  llms generate-templates --dry-run  # Preview what will be created');
    console.log('  llms generate-templates --overwrite  # Force overwrite existing files');
    console.log('');
    console.log('  # Find next document to work on');
    console.log('  llms work-next --language ko');
    console.log('  llms work-next --limit 10 --verbose  # Top 10 priority items');
    console.log('  llms work-next --top 5 --category guide  # Top 5 guide documents');
    console.log('');
    console.log('  # Priority management');
    console.log('  llms priority-stats');
    console.log('  llms priority-health');
    console.log('  llms priority-tasks --verbose');
    console.log('  llms priority-tasks --task-type missing --fix');
    console.log('');
    console.log('  # Generate template files (batch creation)');
    console.log('  llms generate-templates --language en');
    console.log('  llms generate-templates --category api --character-limits 100,300,500');
    console.log('  llms generate-templates --overwrite --dry-run');
    console.log('');
    console.log('  # Fill empty templates with content');
    console.log('  llms fill-templates --language en');
    console.log('  llms fill-templates --category api --character-limit 100 --dry-run');
    console.log('');
    console.log('  # Generate clean LLMS for LLM training (recommended)');
    console.log('  llms clean-llms-generate 300 --language ko --pattern clean');
    console.log('  llms clean-llms-generate --category guide --pattern minimal');
    console.log('  llms clean-llms-generate 100 --pattern raw --dry-run');
    console.log('');
    console.log('  # Generate standard LLMS with metadata');
    console.log('  llms llms-generate --character-limit 300 --language ko');
    console.log('  llms llms-generate --category guide --pattern minimum');
    console.log('');
    console.log('  # Sync documentation changes (for pre-commit hooks)');
    console.log('  llms sync-docs --changed-files="docs/en/guide/example.md" --quiet');
    console.log('  llms sync-docs --changed-files="docs/ko/api/core.md,docs/en/concept/overview.md"');
    console.log('');
    console.log('INIT COMMAND DETAILS:');
    console.log('  The init command performs three main steps:');
    console.log('  1. üìö Document Discovery - Scans docs/ directory for all .md files');
    console.log('  2. üìä Priority Generation - Creates priority.json files with metadata');
    console.log('  3. üìù Template Creation - Generates template files for all character limits');
    console.log('');
    console.log('  Init options:');
    console.log('    --dry-run         Preview what will be created without making changes');
    console.log('    --overwrite       Overwrite existing priority.json files');
    console.log('    --quiet           Reduce output verbosity');
    console.log('    --skip-discovery  Skip document discovery step');
    console.log('    --skip-priority   Skip priority JSON generation step');
    console.log('    --skip-templates  Skip template generation step');
    console.log('');
    console.log('For more detailed options, use --help with specific commands:');
    console.log('  llms clean-llms-generate --help');
    console.log('');
    console.log('üéØ TYPICAL WORKFLOW:');
    console.log('  1. Run "init" to set up priority.json files for all documents');
    console.log('  2. Check priority management with "priority-health" and "priority-tasks"');
    console.log('  3. Run "generate-templates" to create all template files (DEFAULT RECOMMENDED)');
    console.log('  4. Use "work-next --limit 10" to see top priority documents');
    console.log('  5. Edit template files to add or refine content (optional)');
    console.log('  6. Generate LLMS files with "llms-generate" or "clean-llms-generate"');
    console.log('');
    console.log('üîß PRIORITY TASK TYPES:');
    console.log('  üî¥ missing      - priority.json files are missing');
    console.log('  ‚ùå invalid      - JSON syntax errors or missing required fields');
    console.log('  üü° outdated     - source documents modified after priority.json');
    console.log('  üü† needs_review - priority scores don\'t align with category standards');
    console.log('  üîµ needs_update - metadata is incomplete or needs enhancement');
    console.log('');
    console.log('üí° Note: This is the optimized CLI with only core, tested functionality');
    console.log('   Reduced from ~2000 lines to ~200 lines for better maintainability');
    console.log('');
  }
}