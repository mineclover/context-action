import { createLogger, LogLevel } from '@context-action/logger';
import { ActionRegister } from '@context-action/react';
import { toastConfigStore, toastStackIndexStore, toastsStore } from './store';
import type { ActionExecutionToast, Toast, ToastConfig } from './types';

// ÌÜ†Ïä§Ìä∏ Ïï°ÏÖò ÌéòÏù¥Î°úÎìú Îßµ
interface ToastActionMap {
  addToast: {
    type: Toast['type'];
    title: string;
    message: string;
    actionType?: string;
    payload?: any;
    duration?: number;
  };
  addActionToast: {
    actionType: string;
    executionStep: ActionExecutionToast['executionStep'];
    payload?: any;
    executionTime?: number;
    resultData?: any;
    errorMessage?: string;
  };
  removeToast: {
    toastId: string;
  };
  updateToastPhase: {
    toastId: string;
    phase: Toast['phase'];
  };
  clearAllToasts: {};
  updateToastConfig: Partial<ToastConfig>;
  [key: string]: any; // Index signature for ActionPayloadMap constraint
}

// Î°úÍ±∞ Î∞è Ïï°ÏÖò Î†àÏßÄÏä§ÌÑ∞ ÏÑ§Ï†ï
const logger = createLogger(LogLevel.DEBUG);
export const toastActionRegister = new ActionRegister<ToastActionMap>({
  name: 'ToastActions',
});

// Ï†ÑÏó≠ Í∞ùÏ≤¥Ïóê toastActionRegister Îì±Î°ù (LogMonitor hooksÏóêÏÑú Ï†ëÍ∑º Í∞ÄÎä•ÌïòÎèÑÎ°ù)
if (typeof window !== 'undefined') {
  (window as any).toastActionRegister = toastActionRegister;
}

// Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò: ÌÜ†Ïä§Ìä∏ ID ÏÉùÏÑ±
const generateToastId = () =>
  `toast_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

// Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò: Ïï°ÏÖò ÌÉÄÏûÖÎ≥Ñ ÏïÑÏù¥ÏΩò
const getActionIcon = (actionType: string): string => {
  const iconMap: Record<string, string> = {
    // User Profile Actions
    updateProfile: 'üë§',
    toggleTheme: 'üé®',
    resetProfile: 'üîÑ',

    // Shopping Cart Actions
    addToCart: 'üõí',
    removeFromCart: 'üóëÔ∏è',
    updateQuantity: 'üìä',
    clearCart: 'üßπ',

    // Todo Actions
    addTodo: '‚úÖ',
    toggleTodo: '‚òëÔ∏è',
    deleteTodo: 'üóëÔ∏è',
    updateTodoPriority: 'üéØ',

    // Chat Actions
    sendMessage: 'üí¨',
    deleteMessage: 'üóëÔ∏è',
    clearChat: 'üßπ',
    switchUser: 'üë•',

    // System Actions
    login: 'üîë',
    logout: 'üö™',
    saveData: 'üíæ',
    loadData: 'üìÇ',
    error: '‚ùå',
    success: '‚úÖ',
    info: '‚ÑπÔ∏è',
  };

  return iconMap[actionType] || '‚ö°';
};

// Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò: Ïã§Ìñâ Îã®Í≥ÑÎ≥Ñ ÏÉâÏÉÅ
const _getExecutionStepColor = (
  step: ActionExecutionToast['executionStep']
): string => {
  switch (step) {
    case 'start':
      return '#3b82f6'; // blue
    case 'processing':
      return '#f59e0b'; // amber
    case 'success':
      return '#10b981'; // emerald
    case 'error':
      return '#ef4444'; // red
    default:
      return '#6b7280'; // gray
  }
};

// Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò: Ïã§Ìñâ Îã®Í≥ÑÎ≥Ñ Î©îÏãúÏßÄ
const getExecutionStepMessage = (
  actionType: string,
  step: ActionExecutionToast['executionStep'],
  payload?: any,
  errorMessage?: string
): string => {
  const actionNames: Record<string, string> = {
    updateProfile: 'ÌîÑÎ°úÌïÑ ÏóÖÎç∞Ïù¥Ìä∏',
    toggleTheme: 'ÌÖåÎßà Î≥ÄÍ≤Ω',
    addToCart: 'Ïû•Î∞îÍµ¨Îãà Ï∂îÍ∞Ä',
    addTodo: 'Ìï†Ïùº Ï∂îÍ∞Ä',
    sendMessage: 'Î©îÏãúÏßÄ Ï†ÑÏÜ°',
    // ... Îçî ÎßéÏùÄ Ïï°ÏÖòÎì§
  };

  const actionName = actionNames[actionType] || actionType;

  switch (step) {
    case 'start':
      return `${actionName} ÏãúÏûë...`;
    case 'processing':
      return `${actionName} Ï≤òÎ¶¨ Ï§ë...`;
    case 'success':
      return `${actionName} ÏôÑÎ£å!`;
    case 'error':
      return `${actionName} Ïã§Ìå®: ${errorMessage || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`;
    default:
      return `${actionName}`;
  }
};

// Ïï°ÏÖò Ìï∏Îì§Îü¨Îì§
toastActionRegister.register(
  'addToast',
  ({ type, title, message, actionType, payload, duration }) => {
    logger.debug('üçû addToast handler called:', { type, title, message });

    const config = toastConfigStore.getValue();
    const currentToasts = toastsStore.getValue();
    const currentStackIndex = toastStackIndexStore.getValue();

    logger.debug('üçû Current toast state:', {
      currentToastsCount: currentToasts.length,
      maxToasts: config.maxToasts,
      stackIndex: currentStackIndex,
    });

    // ÏµúÎåÄ ÌÜ†Ïä§Ìä∏ Ïàò Ï≤¥ÌÅ¨
    if (currentToasts.length >= config.maxToasts) {
      // Í∞ÄÏû• Ïò§ÎûòÎêú ÌÜ†Ïä§Ìä∏ Ï†úÍ±∞ (timestampÍ∞Ä Date Í∞ùÏ≤¥Í∞Ä ÏïÑÎãê Ïàò ÏûàÏúºÎØÄÎ°ú ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨)
      const oldestToast = currentToasts.reduce((oldest, toast) => {
        const oldestTime =
          oldest.timestamp instanceof Date
            ? oldest.timestamp.getTime()
            : new Date(oldest.timestamp).getTime();
        const currentTime =
          toast.timestamp instanceof Date
            ? toast.timestamp.getTime()
            : new Date(toast.timestamp).getTime();
        return currentTime < oldestTime ? toast : oldest;
      });
      toastActionRegister.dispatch('removeToast', { toastId: oldestToast.id });
    }

    const newToast: Toast = {
      id: generateToastId(),
      type,
      title,
      message,
      actionType,
      payload,
      timestamp: new Date(),
      duration: duration || config.defaultDuration,
      stackIndex: currentStackIndex,
      isVisible: true,
      phase: 'entering',
    };

    // Ïä§ÌÉù Ïù∏Îç±Ïä§ Ï¶ùÍ∞Ä
    toastStackIndexStore.setValue(currentStackIndex + 1);

    // ÌÜ†Ïä§Ìä∏ Ï∂îÍ∞Ä
    logger.debug('üçû Adding new toast to store:', newToast);
    toastsStore.setValue([...currentToasts, newToast]);
    logger.debug(
      'üçû Store updated, new length:',
      toastsStore.getValue().length
    );

    // Ïï†ÎãàÎ©îÏù¥ÏÖò Îã®Í≥Ñ Í¥ÄÎ¶¨
    setTimeout(() => {
      logger.debug('üçû Updating toast to visible phase:', newToast.id);
      toastActionRegister.dispatch('updateToastPhase', {
        toastId: newToast.id,
        phase: 'visible',
      });
    }, 100);

    // ÏûêÎèô Ï†úÍ±∞ ÌÉÄÏù¥Î®∏
    setTimeout(() => {
      logger.debug('üçû Starting toast exit phase:', newToast.id);
      toastActionRegister.dispatch('updateToastPhase', {
        toastId: newToast.id,
        phase: 'exiting',
      });

      setTimeout(() => {
        logger.debug('üçû Removing toast:', newToast.id);
        toastActionRegister.dispatch('removeToast', { toastId: newToast.id });
      }, 300); // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏôÑÎ£å ÌõÑ Ï†úÍ±∞
    }, newToast.duration);

    logger.debug('üçû Toast auto-remove timer set for:', newToast.duration);

    logger.info('addToast', { toastId: newToast.id, type, title });
  }
);

toastActionRegister.register(
  'addActionToast',
  ({
    actionType,
    executionStep,
    payload,
    executionTime,
    resultData,
    errorMessage,
  }) => {
    const icon = getActionIcon(actionType);
    const message = getExecutionStepMessage(
      actionType,
      executionStep,
      payload,
      errorMessage
    );
    const title = `${icon} ${actionType}`;

    let duration = 3000; // Í∏∞Î≥∏ 3Ï¥à
    if (executionStep === 'error') duration = 5000; // ÏóêÎü¨Îäî 5Ï¥à
    if (executionStep === 'processing') duration = 2000; // Ï≤òÎ¶¨ Ï§ëÏùÄ 2Ï¥à

    // ÏûêÎèô Í≥ÑÏÇ∞Îêú Ïã§ÌñâÏãúÍ∞ÑÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Ï†ÑÎã¨Î∞õÏùÄ Í∞í ÏÇ¨Ïö©
    const finalExecutionTime = executionTime || 0;

    toastActionRegister.dispatch('addToast', {
      type: 'action',
      title,
      message: finalExecutionTime
        ? `${message} (${finalExecutionTime}ms)`
        : message,
      actionType,
      payload: {
        executionStep,
        originalPayload: payload,
        resultData,
        errorMessage,
        executionTime: finalExecutionTime, // ÏûêÎèô Í≥ÑÏÇ∞Îêú Ïã§ÌñâÏãúÍ∞Ñ ÏÇ¨Ïö©
      },
      duration,
    });
  }
);

toastActionRegister.register('removeToast', ({ toastId }) => {
  const currentToasts = toastsStore.getValue();
  const updatedToasts = currentToasts.filter((toast) => toast.id !== toastId);
  toastsStore.setValue(updatedToasts);

  logger.info('removeToast', { toastId });
});

toastActionRegister.register('updateToastPhase', ({ toastId, phase }) => {
  const currentToasts = toastsStore.getValue();
  const updatedToasts = currentToasts.map((toast) =>
    toast.id === toastId ? { ...toast, phase } : toast
  );
  toastsStore.setValue(updatedToasts);
});

toastActionRegister.register('clearAllToasts', () => {
  toastsStore.setValue([]);
  toastStackIndexStore.setValue(0);

  logger.info('clearAllToasts', {
    clearedCount: toastsStore.getValue().length,
  });
});

toastActionRegister.register('updateToastConfig', (configUpdate) => {
  const currentConfig = toastConfigStore.getValue();
  const newConfig = { ...currentConfig, ...configUpdate };
  toastConfigStore.setValue(newConfig);

  logger.info('updateToastConfig', configUpdate);
});
