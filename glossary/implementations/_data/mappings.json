{
  "terms": {
    "action-handler": [
      {
        "file": "example/src/hooks/useActionThrottle.ts",
        "name": "ThrottleOptions",
        "type": "interface",
        "line": 9,
        "description": "액션 스로틀링 훅\n지정된 간격으로만 액션 실행을 허용하여 고빈도 호출을 제어합니다.\n",
        "implements": [
          "action-handler"
        ],
        "memberOf": [
          "core-concepts"
        ],
        "examples": [
          "\n```typescript\nconst throttle = useActionThrottle({ interval: 500, leading: true, trailing: true });\n\nconst handleScroll = () => {\n  if (throttle.canExecute('updateScrollPosition')) {\n    dispatch('updateScrollPosition', { scrollY: window.scrollY });\n    throttle.markExecuted('updateScrollPosition');\n  }\n};\n```"
        ],
        "since": "1.0.0",
        "signature": "export interface ThrottleOptions {",
        "lastModified": "2025-08-01T06:07:56.286Z"
      },
      {
        "file": "example/src/hooks/useActionGuard.ts",
        "name": "DebounceOptions",
        "type": "type",
        "line": 8,
        "description": "통합 액션 가드 훅\n디바운싱, 스로틀링, 블로킹을 하나의 인터페이스로 관리합니다.\n",
        "implements": [
          "action-handler",
          "pipeline-controller"
        ],
        "memberOf": [
          "core-concepts"
        ],
        "examples": [
          "\n```typescript\n// 기본 디바운싱 모드\nconst guard = useActionGuard({ mode: 'debounce', debounce: { delay: 1000 } });\n\n// 액션별 개별 설정\nconst guard = useActionGuard({\n  actionConfig: {\n    'addToCart': { mode: 'debounce', debounce: { delay: 1000 } },\n    'updatePosition': { mode: 'throttle', throttle: { interval: 100 } },\n    'submitForm': { mode: 'block', block: { condition: () => isSubmitting } }\n  }\n});\n\nconst handleClick = () => {\n  if (guard.canExecute('addToCart', product)) {\n    dispatch('addToCart', product);\n    guard.markExecuted('addToCart', product);\n  }\n};\n```"
        ],
        "since": "1.0.0",
        "signature": "import { useActionDebouncer, type DebounceOptions } from './useActionDebouncer';",
        "lastModified": "2025-08-01T06:07:56.286Z"
      },
      {
        "file": "example/src/hooks/useActionDebouncer.ts",
        "name": "DebounceOptions",
        "type": "interface",
        "line": 9,
        "description": "액션 중복 실행을 방지하는 디바운싱 훅\n",
        "implements": [
          "action-handler"
        ],
        "memberOf": [
          "core-concepts"
        ],
        "examples": [
          "\n```typescript\nconst debouncedAction = useActionDebouncer('addToCart', { delay: 1000 });\n\nconst handleAddToCart = () => {\n  if (debouncedAction.canExecute(product)) {\n    dispatch('addToCart', product);\n    debouncedAction.markExecuted('addToCart', product);\n  }\n};\n```"
        ],
        "since": "1.0.0",
        "signature": "export interface DebounceOptions {",
        "lastModified": "2025-08-01T06:07:56.287Z"
      },
      {
        "file": "example/src/hooks/useActionBlock.ts",
        "name": "BlockOptions",
        "type": "interface",
        "line": 9,
        "description": "액션 실행 차단 훅\n특정 조건이나 상태에서 액션 실행을 완전히 차단합니다.\n",
        "implements": [
          "action-handler"
        ],
        "memberOf": [
          "core-concepts"
        ],
        "examples": [
          "\n```typescript\nconst [isLoading, setIsLoading] = useState(false);\nconst blocker = useActionBlock({\n  condition: () => isLoading,\n  onBlocked: (actionName) => console.log(`${actionName} blocked due to loading`)\n});\n\nconst handleSubmit = () => {\n  if (!blocker.isBlocked('submitForm')) {\n    setIsLoading(true);\n    dispatch('submitForm', formData);\n  }\n};\n```"
        ],
        "since": "1.0.0",
        "signature": "export interface BlockOptions {",
        "lastModified": "2025-08-01T06:07:56.287Z"
      }
    ],
    "pipeline-controller": [
      {
        "file": "example/src/hooks/useActionGuard.ts",
        "name": "DebounceOptions",
        "type": "type",
        "line": 8,
        "description": "통합 액션 가드 훅\n디바운싱, 스로틀링, 블로킹을 하나의 인터페이스로 관리합니다.\n",
        "implements": [
          "action-handler",
          "pipeline-controller"
        ],
        "memberOf": [
          "core-concepts"
        ],
        "examples": [
          "\n```typescript\n// 기본 디바운싱 모드\nconst guard = useActionGuard({ mode: 'debounce', debounce: { delay: 1000 } });\n\n// 액션별 개별 설정\nconst guard = useActionGuard({\n  actionConfig: {\n    'addToCart': { mode: 'debounce', debounce: { delay: 1000 } },\n    'updatePosition': { mode: 'throttle', throttle: { interval: 100 } },\n    'submitForm': { mode: 'block', block: { condition: () => isSubmitting } }\n  }\n});\n\nconst handleClick = () => {\n  if (guard.canExecute('addToCart', product)) {\n    dispatch('addToCart', product);\n    guard.markExecuted('addToCart', product);\n  }\n};\n```"
        ],
        "since": "1.0.0",
        "signature": "import { useActionDebouncer, type DebounceOptions } from './useActionDebouncer';",
        "lastModified": "2025-08-01T06:07:56.286Z"
      },
      {
        "file": "packages/core/src/types.ts",
        "name": "definitions",
        "type": "type",
        "line": 2,
        "description": "Controller object provided to action handlers for pipeline management\n",
        "implements": [
          "pipeline-controller"
        ],
        "memberOf": [
          "core-concepts"
        ],
        "examples": [],
        "since": "0.0.1",
        "signature": "* @fileoverview Core type definitions for Context-Action framework",
        "lastModified": "2025-08-01T06:07:56.289Z"
      }
    ],
    "action-payload-map": [
      {
        "file": "packages/core/src/types.ts",
        "name": "definitions",
        "type": "type",
        "line": 2,
        "description": "Base interface for defining action payload mappings\n",
        "implements": [
          "action-payload-map"
        ],
        "memberOf": [
          "api-terms"
        ],
        "examples": [
          "\n```typescript\ninterface MyActions extends ActionPayloadMap {\n  increment: void;\n  setCount: number;\n  updateUser: { id: string; name: string };\n  deleteUser: { id: string };\n}\n```"
        ],
        "since": "0.0.1",
        "signature": "* @fileoverview Core type definitions for Context-Action framework",
        "lastModified": "2025-08-01T06:07:56.289Z"
      }
    ]
  },
  "categories": {
    "core-concepts": [
      "action-handler",
      "pipeline-controller"
    ],
    "api-terms": [
      "action-payload-map"
    ]
  },
  "files": {
    "example/src/hooks/useActionThrottle.ts": {
      "terms": [
        "action-handler"
      ],
      "lastScanned": "2025-08-01T06:07:56.286Z"
    },
    "example/src/hooks/useActionGuard.ts": {
      "terms": [
        "action-handler",
        "pipeline-controller"
      ],
      "lastScanned": "2025-08-01T06:07:56.286Z"
    },
    "example/src/hooks/useActionDebouncer.ts": {
      "terms": [
        "action-handler"
      ],
      "lastScanned": "2025-08-01T06:07:56.287Z"
    },
    "example/src/hooks/useActionBlock.ts": {
      "terms": [
        "action-handler"
      ],
      "lastScanned": "2025-08-01T06:07:56.287Z"
    },
    "packages/core/src/types.ts": {
      "terms": [
        "action-payload-map",
        "pipeline-controller"
      ],
      "lastScanned": "2025-08-01T06:07:56.289Z"
    }
  },
  "statistics": {
    "totalTerms": 0,
    "mappedTerms": 3,
    "unmappedTerms": 0,
    "totalFiles": 82,
    "taggedFiles": 5,
    "lastUpdate": "2025-08-01T06:07:56.291Z"
  }
}