# Î™©Ï∞®

- Core Concepts
- Context Action Framework Overview
- Getting Started
- Quick Start Guide

# Core Concepts

# Core Concepts

Understanding the fundamental concepts of the Context-Action framework is essential for effective implementation. This guide covers the key building blocks and their relationships.

## Architecture Overview

## Core Components

### 1. Domain-Specific Hooks Pattern

### 2. Store System

### 3. Action Pipeline System

### 4. Provider Composition

## Data Flow Patterns

### 1. Component ‚Üí Action ‚Üí Store ‚Üí Component

### 2. Handler Access Patterns

### 3. Cross-Domain Communication

## Handler Registration Patterns

### Best Practice Pattern

### Handler Configuration Options

## Context Boundaries & Domain Isolation

### Single Domain Architecture

### Multi-Domain Architecture

## Memory Management

### Store Lifecycle

### Handler Cleanup

## Type Safety Features

### Automatic Type Inference

### Compile-Time Safety

## Summary

The Context-Action framework's core concepts work together to provide:

# Context Action Framework Overview

# Context Action Framework Overview

## Architecture Overview

## Key Benefits

## Quick Navigation

- [Core Concepts](./concepts) - Understand the fundamental concepts

## Framework Philosophy

The Context-Action framework implements a clean separation of concerns through an MVVM-inspired pattern combined with **Context Store Pattern** for complete domain isolation.

```mermaid

graph LR

A[Component] -->|dispatch| B[Action Pipeline]

B -->|handlers| C[Store]

C -->|subscribe| A

style A fill:#e3f2fd

style B fill:#fff8e1

style C fill:#e8f5e8

1. **Domain Isolation** - Each context maintains complete independence

2. **Type Safety** - Full TypeScript support with domain-specific hooks

3. **Performance** - Only affected components re-render

4. **Scalability** - Easy to add new domains without affecting existing ones

5. **Team Collaboration** - Different teams can work on different domains

# Getting Started

# Getting Started

## What is Context-Action?

### Problems with Existing Libraries

### Context-Action's Solution

## Core Architecture

### Key Components

## Package Structure

## Installation

# Install both packages

# Or with pnpm

# Or with yarn

## Two Main Patterns

### üéØ Action Only Pattern

### üè™ Store Only Pattern (Recommended)

## Quick Example

## Next Steps

## Key Benefits

Welcome to **Context-Action framework** - a revolutionary state management system designed to overcome the fundamental limitations of existing libraries through document-centric context separation and effective artifact management.

Context-Action addresses critical issues in modern state management:

- **High React Coupling**: Tight integration makes component modularization and props handling difficult

- **Binary State Approach**: Simple global/local state dichotomy fails to handle specific scope-based separation

# Quick Start Guide

# Quick Start Guide

## Installation

# or

# or

## 5-Minute Implementation

### Step 1: Define Your Domain

### Step 2: Create Action Handlers

### Step 3: Create Your Component

### Step 4: Setup Your App

## What You Just Built

## Key Patterns You Learned

### 1. Domain-Specific Hooks

### 2. Reactive Subscriptions

### 3. Handler Registration with Cleanup

### 4. Provider Composition

## Next Steps

### Add More Domains

### Advanced Patterns

### Testing Your Code

## Common Patterns

### Loading States

### Error Handling

### Conditional Logic

## Summary

**TypeScript errors?** Check that your action payload matches the interface definition.

Get up and running with the Context-Action framework in minutes. This guide shows you the essential patterns to start building type-safe, scalable React applications.

```bash

npm install @context-action/core @context-action/react

yarn add @context-action/core @context-action/react

# Action Only Methods

```typescript

```

```typescript

# Cross-Domain Integration (When Needed)