# 목차

- 핵심 개념
- Context Action 프레임워크 개요
- 빠른 시작
- 액션 핸들러
- 개발 모범 사례
- 공통 함정
- 크로스 도메인 통합
- 도메인 훅 패턴

# 핵심 개념

# 핵심 개념

Context-Action 프레임워크의 기본 개념을 이해하는 것은 효과적인 구현을 위해 필수적입니다. 이 가이드는 핵심 구성 요소와 그들의 관계를 다룹니다.

## 아키텍처 개요

## 핵심 구성 요소

### 1. 도메인별 훅 패턴

// 도메인 데이터 구조 정의

### 2. 스토어 시스템

### 3. 액션 파이프라인 시스템

// 액션 인터페이스 정의

### 4. 프로바이더 구성

## 데이터 흐름 패턴

### 1. 컴포넌트 → 액션 → 스토어 → 컴포넌트

### 2. 핸들러 접근 패턴

### 3. 크로스 도메인 커뮤니케이션

## 핸들러 등록 패턴

### 최선의 패턴

### 핸들러 구성 옵션

## 컨텍스트 경계 & 도메인 격리

### 단일 도메인 아키텍처

### 다중 도메인 아키텍처

## 메모리 관리

### 스토어 생명주기

### 핸들러 정리

## 타입 안전성 기능

### 자동 타입 추론

### 컴파일 시 안전성

## 요약

Context-Action 프레임워크의 핵심 개념들이 함께 작동하여 다음을 제공합니다:

이러한 개념을 이해하면 명확한 아키텍처 경계를 가진 확장 가능하고 유지 관리 가능한 애플리케이션을 구축할 수 있습니다.

Context-Action 프레임워크는 세 가지 주요 계층을 통해 깔끔한 관심사 분리를 구현합니다:

```mermaid

graph TB

subgraph "VIEW LAYER"

A[React 컴포넌트<br/>UI 프레젠테이션]

end

subgraph "VIEWMODEL LAYER"

B[액션 핸들러<br/>비즈니스 로직]

subgraph "MODEL LAYER"

C[스토어 시스템<br/>상태 관리]

A -->|액션 디스패치| B

B -->|스토어 업데이트| C

C -->|구독/리렌더| A

style A fill:#e3f2fd

style B fill:#fff8e1

style C fill:#e8f5e8

# Context Action 프레임워크 개요

# Context Action 프레임워크 개요

## 아키텍처 개요

## 주요 장점

## 빠른 탐색

- [핵심 개념](./concepts) - 기본 개념 이해하기

## 프레임워크 철학

Context-Action 프레임워크는 다음 핵심 원칙을 따릅니다:

Context-Action 프레임워크는 완전한 도메인 격리를 위한 **컨텍스트 스토어 패턴**과 결합된 MVVM에서 영감을 받은 패턴을 통해 깔끔한 관심사 분리를 구현합니다.

# 빠른 시작

# 빠른 시작

## 설치

# 또는

## 1단계: 도메인 정의

먼저 애플리케이션 도메인을 정의합니다:

// 데이터 구조 정의

// 액션 정의

## 2단계: 비즈니스 로직 (핸들러)

## 3단계: UI 컴포넌트

## 4단계: 프로바이더 설정

## 5단계: 앱 설정

## 결과

## 애플리케이션 실행

# 또는

## 주요 개념 요약

### 1. 도메인별 훅

### 2. 반응형 구독

### 3. 중앙화된 비즈니스 로직

### 4. 자동 정리

# 액션 핸들러

# 액션 핸들러

## 핸들러 기본 구조

### 핸들러 시그니처

### 기본 핸들러 패턴

## 핸들러 구성 옵션

### 우선순위 시스템

### 블로킹 vs 논블로킹

### 핸들러 메타데이터

## 고급 핸들러 패턴

### 1. 조건부 실행 핸들러

### 2. 낙관적 업데이트 핸들러

### 3. 배치 처리 핸들러

### 4. 디바운스 핸들러

### 5. 리트라이 메커니즘

## 오류 처리 패턴

### 1. 계층적 오류 처리

# 개발 모범 사례

# 개발 모범 사례

## 핸들러 등록 모범 사례

# 공통 함정

# 공통 함정

## 핸들러 등록 문제

### ❌ 정리 누락

### ❌ 비동기 핸들러에서 `blocking` 누락