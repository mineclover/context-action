# Context-Action 프레임워크 - 5000자 요약

생성: 2025-08-14
유형: 적응형 글자 수 제한
언어: KO
목표 글자 수: 5000

이 문서는 Context-Action 프레임워크 문서의 우선순위 기반 적응형 구성을 사용하여 5000자에 최적화된 지능적 요약을 제공합니다.


## 핵심 (4/4 문서)

### 핵심 개념

**우선순위**: 100/100 (핵심)  
**카테고리**: 가이드  
**하위카테고리**: 기초  
**출처**: `guide/concepts.md`

# 핵심 개념

Context-Action 프레임워크의 기본 개념을 이해하는 것은 효과적인 구현을 위해 필수적입니다. 이 가이드는 핵심 구성 요소와 그들의 관계를 다룹니다.

**주요 개념**: Context-Action 프레임워크, 문서 중심 MVVM, 액션 파이프라인

### 가이드 개요

**우선순위**: 100/100 (핵심)  
**카테고리**: 가이드  
**하위카테고리**: 개요  
**출처**: `guide/overview.md`

# Context Action 프레임워크 개요

Context-Action 프레임워크는 완전한 도메인 격리를 위한 **Context Store Pattern**과 결합된 MVVM에서 영감을 받은 패턴을 통해 관심사의 깔끔한 분리를 구현합니다.

**주요 개념**: 문서 중심 상태 관리, 도메인 격리, MVVM 아키텍처

### 가이드 시작하기

**우선순위**: 95/100 (핵심)  
**카테고리**: 가이드  
**하위카테고리**: 시작  
**출처**: `guide/getting-started.md`

# 시작하기

**Context-Action 프레임워크**에 오신 것을 환영합니다 - 문서 중심 컨텍스트 분리와 효과적인 아티팩트 관리를 통해 기존 라이브러리의 근본적인 한계를 극복하도록 설계된 혁신적인 상태 관리 시스템입니다.

**주요 개념**: 상태 관리, React 통합, TypeScript 지원

### 가이드 빠른 시작

**우선순위**: 95/100 (핵심)  
**카테고리**: 가이드  
**하위카테고리**: 빠른시작  
**출처**: `guide/quick-start.md`

# 빠른 시작 가이드

몇 분 안에 Context-Action 프레임워크를 시작하고 실행하세요. 이 가이드는 타입 안전하고 확장 가능한 React 애플리케이션을 구축하기 위한 필수 패턴을 보여줍니다.

**주요 개념**: 빠른 설정, 패턴 선택, 기본 구현


## 필수 (18/18 문서)

### Action Only 메서드

**우선순위**: 85/100 (필수)  
**카테고리**: api  
**하위카테고리**: 액션패턴  
**출처**: `api/action-only.md`

Action Only 패턴은 상태 관리 없이 순수한 액션 디스패치를 위한 createActionContext 함수를 제공합니다.

### 가이드 액션 핸들러

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 액션  
**출처**: `guide/action-handlers.md`

액션 핸들러 등록, 우선순위 관리, 에러 처리 등 액션 시스템의 핵심 기능을 설명합니다.

### 가이드 액션 파이프라인

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 파이프라인  
**출처**: `guide/action-pipeline.md`

다단계 액션 처리, 핸들러 체인, 파이프라인 제어에 대한 상세한 가이드를 제공합니다.

### 가이드 베스트 프랙티스

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 실무  
**출처**: `guide/best-practices.md`

프레임워크 사용 시 권장사항과 피해야 할 안티패턴에 대한 실무 지침을 제공합니다.

### 가이드 일반적인 함정

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 문제해결  
**출처**: `guide/common-pitfalls.md`

개발 중 자주 발생하는 문제점과 해결 방안을 다룹니다.

### 가이드 도메인 간 통합

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 통합  
**출처**: `guide/cross-domain-integration.md`

여러 도메인 컨텍스트 간의 통신과 데이터 공유 방법을 설명합니다.

### 가이드 도메인 훅 패턴

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 훅  
**출처**: `guide/domain-hooks-pattern.md`

도메인별 훅 구성과 컨텍스트 기반 개발 패턴을 다룹니다.

### 가이드 에러 처리

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 에러  
**출처**: `guide/error-handling.md`

액션 파이프라인과 스토어에서의 에러 처리 전략을 설명합니다.

### 가이드 핸들러 ID 전략

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 식별자  
**출처**: `guide/handler-id-strategies.md`

핸들러 식별자 관리와 충돌 방지 전략을 다룹니다.

### 가이드 로직 맞춤 훅

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 로직  
**출처**: `guide/logic-fit-hooks.md`

비즈니스 로직에 특화된 훅 패턴과 구현 방법을 설명합니다.

### 가이드 MVVM 아키텍처

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 아키텍처  
**출처**: `guide/mvvm-architecture.md`

Model-View-ViewModel 패턴의 Context-Action 프레임워크 적용을 다룹니다.

### 가이드 패턴

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 패턴  
**출처**: `guide/patterns.md`

Action Only, Store Only, 패턴 조합 등 주요 개발 패턴을 설명합니다.

### 가이드 성능

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 최적화  
**출처**: `guide/performance.md`

성능 최적화 기법과 메모리 관리 전략을 다룹니다.

### 가이드 철학

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 설계철학  
**출처**: `guide/philosophy.md`

프레임워크의 설계 철학과 기본 원칙을 설명합니다.

### 가이드 프로바이더 조합

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 프로바이더  
**출처**: `guide/provider-composition.md`

여러 컨텍스트 프로바이더의 조합과 관리 방법을 다룹니다.

### 가이드 React 통합

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: React  
**출처**: `guide/react-integration.md`

React 생태계와의 통합 방법과 호환성을 설명합니다.

### 가이드 설정 사용법

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 설정  
**출처**: `guide/setup-usage.md`

초기 설정과 기본 사용법에 대한 단계별 가이드를 제공합니다.

### 가이드 스토어 관리

**우선순위**: 80/100 (필수)  
**카테고리**: 가이드  
**하위카테고리**: 스토어  
**출처**: `guide/store-management.md`

스토어 생성, 관리, 최적화에 대한 상세한 설명을 다룹니다.


## 중요 (11/11 문서)

### API 액션 레지스트리

**우선순위**: 75/100 (중요)  
**카테고리**: api  
**하위카테고리**: 레지스트리  
**출처**: `api/action-registry.md`

액션 등록 시스템의 API 참조 문서입니다.

### API 코어 액션 레지스터

**우선순위**: 75/100 (중요)  
**카테고리**: api  
**하위카테고리**: 코어  
**출처**: `api/core-action-register.md`

핵심 ActionRegister 클래스의 API 문서입니다.

### API 코어 파이프라인 컨트롤러

**우선순위**: 75/100 (중요)  
**카테고리**: api  
**하위카테고리**: 파이프라인  
**출처**: `api/core-pipeline-controller.md`

PipelineController 클래스의 고급 기능에 대한 API 문서입니다.

### API 선언적 스토어 패턴

**우선순위**: 75/100 (중요)  
**카테고리**: api  
**하위카테고리**: 스토어패턴  
**출처**: `api/declarative-store-pattern.md`

선언적 스토어 패턴의 API 참조 문서입니다.

### API 파이프라인 컨트롤러

**우선순위**: 75/100 (중요)  
**카테고리**: api  
**하위카테고리**: 제어  
**출처**: `api/pipeline-controller.md`

파이프라인 제어 메서드의 API 문서입니다.

### API React 액션 컨텍스트

**우선순위**: 75/100 (중요)  
**카테고리**: api  
**하위카테고리**: React  
**출처**: `api/react-action-context.md`

React 액션 컨텍스트 통합 API 문서입니다.

### API React 스토어 매니저

**우선순위**: 75/100 (중요)  
**카테고리**: api  
**하위카테고리**: 매니저  
**출처**: `api/react-store-manager.md`

React 스토어 매니저의 API 참조 문서입니다.

### API React 스토어 패턴

**우선순위**: 75/100 (중요)  
**카테고리**: api  
**하위카테고리**: 패턴  
**출처**: `api/react-store-pattern.md`

React 스토어 패턴 통합 API 문서입니다.

### API 스토어 매니저

**우선순위**: 75/100 (중요)  
**카테고리**: api  
**하위카테고리**: 관리  
**출처**: `api/store-manager.md`

스토어 매니저 유틸리티의 API 문서입니다.

### API Store Only

**우선순위**: 75/100 (중요)  
**카테고리**: api  
**하위카테고리**: 스토어전용  
**출처**: `api/store-only.md`

Store Only 패턴의 API 참조 문서입니다.

### 기본 설정 예제

**우선순위**: 75/100 (중요)  
**카테고리**: 예제  
**하위카테고리**: 시작  
**출처**: `examples/basic-setup.md`

기본 설정과 초기 구현 예제를 제공합니다.


## 참조 (11/11 문서)

### 개념 액션 파이프라인 가이드

**우선순위**: 50/100 (참조)  
**카테고리**: 개념  
**하위카테고리**: 파이프라인  
**출처**: `concept/action-pipeline-guide.md`

액션 파이프라인의 개념적 설명과 활용 방안을 다룹니다.

### 개념 아키텍처 가이드

**우선순위**: 50/100 (참조)  
**카테고리**: 개념  
**하위카테고리**: 구조  
**출처**: `concept/architecture-guide.md`

전체 아키텍처의 개념적 구조와 설계 원칙을 설명합니다.

### 개념 컨벤션

**우선순위**: 50/100 (참조)  
**카테고리**: 개념  
**하위카테고리**: 규칙  
**출처**: `concept/conventions.md`

코딩 컨벤션과 네이밍 규칙에 대한 가이드라인을 제공합니다.

### 개념 훅 참조

**우선순위**: 50/100 (참조)  
**카테고리**: 개념  
**하위카테고리**: 훅  
**출처**: `concept/hooks-reference.md`

사용 가능한 모든 훅의 참조 문서입니다.

### 개념 패턴 가이드

**우선순위**: 50/100 (참조)  
**카테고리**: 개념  
**하위카테고리**: 패턴  
**출처**: `concept/pattern-guide.md`

패턴 선택과 적용에 대한 개념적 가이드를 제공합니다.

### 예제 Action Only

**우선순위**: 50/100 (참조)  
**카테고리**: 가이드  
**하위카테고리**: 액션전용  
**출처**: `examples-action-only.md`

Action Only 패턴의 구체적인 구현 예제를 다룹니다.

### 예제 패턴 조합

**우선순위**: 50/100 (참조)  
**카테고리**: 가이드  
**하위카테고리**: 조합  
**출처**: `examples-pattern-composition.md`

여러 패턴을 조합한 복합 구현 예제를 제공합니다.

### 예제 Store Only

**우선순위**: 50/100 (참조)  
**카테고리**: 가이드  
**하위카테고리**: 스토어전용  
**출처**: `examples-store-only.md`

Store Only 패턴의 실제 구현 사례를 다룹니다.

### LLMs 컨벤션

**우선순위**: 50/100 (참조)  
**카테고리**: llms  
**하위카테고리**: 규칙  
**출처**: `llms/conventions.md`

LLM 통합을 위한 컨벤션과 가이드라인을 제공합니다.

### LLMs 인덱스

**우선순위**: 50/100 (참조)  
**카테고리**: llms  
**하위카테고리**: 색인  
**출처**: `llms/index.md`

LLM 관련 문서의 전체 인덱스를 제공합니다.

### LLMs 라이브러리 스펙

**우선순위**: 50/100 (참조)  
**카테고리**: llms  
**하위카테고리**: 명세  
**출처**: `llms/library-specs.md`

라이브러리 스펙과 LLM 통합 기준을 정의합니다.



---

## 구성 요약

**목표 글자 수**: 5000  
**생성된 글자 수**: 6400  
**구성 전략**: 적응형 우선순위 기반  

**분배**:
- **핵심**: 4개 문서 × 450자 = 1800자
- **필수**: 18개 문서 × 133.33자 = 2400자  
- **중요**: 11개 문서 × 100자 = 1100자
- **참조**: 11개 문서 × 100자 = 1100자

**총 문서 수**: 44  
**적응 알고리즘**: 우선순위 기반 확장을 통한 4단계 적응 절차  

*@context-action/llms-generator를 사용하여 자동 생성됨*