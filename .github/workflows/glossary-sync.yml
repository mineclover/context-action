name: Glossary Mapping Sync

on:
  push:
    branches: [ main ]
    paths:
      - 'example/src/**/*.{ts,tsx,js,jsx}'
      - 'packages/*/src/**/*.{ts,tsx,js,jsx}'
      - 'glossary/terms/**/*.md'
      - 'glossary/tools/**/*.js'
  pull_request:
    branches: [ main ]
    paths:
      - 'example/src/**/*.{ts,tsx,js,jsx}'
      - 'packages/*/src/**/*.{ts,tsx,js,jsx}'
      - 'glossary/terms/**/*.md'
      - 'glossary/tools/**/*.js'

jobs:
  glossary-sync:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install root dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build glossary package
        run: pnpm --filter @context-action/glossary build
      
      - name: Update glossary system
        id: glossary-update
        run: |
          echo "Running complete glossary update pipeline..."
          pnpm glossary:update
          echo "update_completed=true" >> $GITHUB_OUTPUT
        continue-on-error: true
      
      - name: Check for changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            if git diff --quiet glossary/implementations/dashboard.md; then
              echo "changes_detected=false" >> $GITHUB_OUTPUT
              echo "No changes detected in glossary dashboard"
            else
              echo "changes_detected=true" >> $GITHUB_OUTPUT
              echo "Changes detected in glossary dashboard"
            fi
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit updated dashboard
        if: github.event_name == 'push' && steps.changes.outputs.changes_detected == 'true'
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add glossary/implementations/dashboard.md
          
          # Ïª§Î∞ã Î©îÏãúÏßÄ ÏÉùÏÑ±
          COMMIT_MSG="ü§ñ Auto-update glossary dashboard
          
          - Updated implementation status dashboard
          - Triggered by: ${{ github.event.head_commit.message }}
          - Commit: ${{ github.sha }}
          
          Generated by GitHub Actions"
          
          git commit -m "$COMMIT_MSG" || echo "No changes to commit"
      
      - name: Push changes
        if: github.event_name == 'push' && steps.changes.outputs.changes_detected == 'true'
        run: |
          git push origin main
      
      - name: Create PR comment with validation results
        if: github.event_name == 'pull_request' && steps.glossary-update.outputs.update_completed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Í≤ÄÏ¶ù Í≤∞Í≥º ÏùΩÍ∏∞
            const reportPath = 'glossary/implementations/_data/validation-report.json';
            let report = { summary: { errors: 0, warnings: 0 } };
            
            try {
              if (fs.existsSync(reportPath)) {
                report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              }
            } catch (error) {
              console.log('Could not read validation report:', error.message);
            }
            
            const { errors, warnings, implementationRate } = report.summary;
            const success = errors === 0;
            
            // ÎåìÍ∏Ä ÎÇ¥Ïö© ÏÉùÏÑ±
            const status = success ? '‚úÖ' : '‚ùå';
            const statusText = success ? 'Passed' : 'Failed';
            
            let comment = `## ${status} Glossary Mapping Validation ${statusText}
            
            ### üìä Summary
            - **Errors**: ${errors}
            - **Warnings**: ${warnings}
            - **Implementation Rate**: ${implementationRate}%
            
            `;
            
            if (errors > 0) {
              comment += `### ‚ùå Errors Found
              
              Please fix the following issues before merging:
              
              `;
              
              if (report.details && report.details.errors) {
                const errorsByType = {};
                report.details.errors.forEach(error => {
                  if (!errorsByType[error.type]) {
                    errorsByType[error.type] = [];
                  }
                  errorsByType[error.type].push(error);
                });
                
                for (const [type, typeErrors] of Object.entries(errorsByType)) {
                  comment += `**${type}**:\n`;
                  typeErrors.slice(0, 5).forEach(error => {
                    comment += `- ${error.file}:${error.line || '?'} - ${error.message}\n`;
                  });
                  if (typeErrors.length > 5) {
                    comment += `- ... and ${typeErrors.length - 5} more\n`;
                  }
                  comment += '\n';
                }
              }
            }
            
            if (warnings > 0) {
              comment += `### ‚ö†Ô∏è Warnings (${warnings})
              
              Consider addressing these warnings to improve documentation quality.
              
              `;
            }
            
            comment += `### üîó Resources
            - [Glossary Guidelines](https://github.com/${{ github.repository }}/blob/main/glossary/implementations/GLOSSARY_GUIDELINES.md)
            - [Term-Code Linking](https://github.com/${{ github.repository }}/blob/main/glossary/implementations/TERM_CODE_LINKING.md)
            
            <details>
            <summary>Full validation report</summary>
            
            \`\`\`json
            ${JSON.stringify(report, null, 2)}
            \`\`\`
            
            </details>`;
            
            // Í∏∞Ï°¥ ÎåìÍ∏Ä Ï∞æÍ∏∞
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Glossary Mapping Validation')
            );
            
            if (botComment) {
              // Í∏∞Ï°¥ ÎåìÍ∏Ä ÏóÖÎç∞Ïù¥Ìä∏
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // ÏÉà ÎåìÍ∏Ä ÏÉùÏÑ±
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
      
      - name: Upload validation artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: glossary-validation-results
          path: |
            glossary/implementations/_data/
            glossary/implementations/dashboard.md
          retention-days: 30
      
      - name: Set job status
        if: always()
        run: |
          if [ "${{ steps.glossary-update.outcome }}" = "failure" ]; then
            echo "‚ùå Glossary update failed with errors"
            exit 1
          elif [ "${{ steps.glossary-update.outcome }}" = "success" ]; then
            echo "‚úÖ Glossary update completed successfully"
          else
            echo "‚ö†Ô∏è Glossary update completed with warnings"
          fi