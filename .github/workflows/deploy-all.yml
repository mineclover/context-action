name: Deploy Documentation and Example

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'example/**'
      - 'packages/*/src/**'
      - '.github/workflows/deploy-all.yml'
      - 'package.json'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          if pnpm install --frozen-lockfile 2>/dev/null; then
            echo "‚úÖ Installed with frozen lockfile"
          else
            echo "‚ö†Ô∏è Frozen lockfile failed, trying without frozen lockfile"
            pnpm install --no-frozen-lockfile
          fi

      - name: Build packages
        run: pnpm build

      # Build documentation
      - name: Generate API documentation
        run: |
          pnpm docs:api
          pnpm docs:sync

      - name: Build documentation
        run: pnpm docs:build

      # Build example application
      - name: Build example application
        run: |
          cd example
          NODE_ENV=production pnpm build

      # Combine both builds
      - name: Combine builds for deployment
        run: |
          # Create deployment directory
          mkdir -p deploy-dist
          
          # Copy documentation as root
          cp -r docs/.vitepress/dist/* deploy-dist/
          
          # Copy example to subdirectory
          mkdir -p deploy-dist/context-action-example
          cp -r example/dist/* deploy-dist/context-action-example/
          
          # Verify structure
          echo "üìÅ Deployment structure:"
          ls -la deploy-dist/
          echo "üìÅ Example subdirectory:"
          ls -la deploy-dist/context-action-example/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: deploy-dist

  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4